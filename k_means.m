function  [assignments, centroids, error] = kMeans(X, k, centroids = 0, maxi = 100, eps = 0.0001)	  % Initialize Centroids if not given (random)  if (centroids == 0)    centroids = rand(2,k);	endif    % Get Row and Feature lengths	N = length(X(:,1));	dims = length(X(1,:));    % create an assignemnt list	assignments = ones(1, N);      % iate	for i = 1:maxi    % Calculate Distance Matrix    D = (-2*(centroids'*X))+repmat(sum(centroids'.^2),1,N)+repmat(sum(X.^2),k,1);        % For each cluster, save sizes of cluster and totals (for mean calculation)		clusterTotals = zeros(k, dims);		clusterSizes = zeros(k, 1);        % iterate all rows		for rowIx = 1:N			minDist = realmax;			assignTo = 0;            %iate clusters			for centroidIx = 1:k 				% Calculate Euclidean distance of point to centroid				%dist = sqrt(sum((X(rowIx, : ) - centroids(centroidIx, :)).^2));        dist = D(rowIx,centroidIx)                % make assignment, if distance is minimal				if dist < minDist					minDist = dist;					assignTo = centroidIx;				endif			endfor            % add assignemnt to assignment list			assignments(rowIx) = assignTo;			% Add values to the cluster total / size for later calculation			clusterTotals(assignTo, :) += X(rowIx, :);			clusterSizes(assignTo)++;      endfor      		% If a cluster is empty choose a random data point as new 		% cluster center		for clusterIx = 1:k			if (clusterSizes(clusterIx) == 0)				randomRow = round(1 + rand() * (N - 1) );				clusterTotals(clusterIx, :) =  X(randomRow, :);				clusterSizes(clusterIx) = 1;			endif		endfor        % Caluclate new Centroids		newCentroids = zeros(k, dims);		for centroidIx = 1:k 			newCentroids(centroidIx, :) = clusterTotals(centroidIx, : ) / clusterSizes(centroidIx);		endfor    error(i) = 0;    % Calculate Error    % iate all rows		for rowIx = 1:N            %iate clusters      % Calculate Error      error(i) += sum((X(rowIx, : ) - newCentroids(assignments(rowIx), :)).^2);		endfor    error(i) = (error(i) / N);          if(i > 1)		  diff = ((error(i-1)-error(i))/error(i-1));      if diff < eps        break;      endif	  endif    		centroids = newCentroids;	endfor	  assignments = assignments';  error = error';	%printf('i: %d, diff: %f\n', i, diff);endfunction