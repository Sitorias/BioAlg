% Exercise 1 b)% same as a, but use randperm for initial centroids.[a,b,c,d,X] = initClusters();%Plot raw clustersfigure(1)plotClusters(a,b,c,d)title("std=0.5, n=100 (1 b)")saveas (1, "data_1b.png");% Plot how the k-means look like[assignments, centroids, mse] = kMeans(X,4);XAssigned = horzcat(X, assignments);figure(2)plotKMeans(XAssigned, centroids)title("Cluster (random initialized), std=0.5, L2-Norm (1b)")saveas (2, "cluster_1b.png");# Plot the error per Iterationfigure(3)plot(mse)title("ErrorPerInit (random initialized), std=0.5, L2-Norm (1b)")saveas (3, "errorsPerInit_1b.png");% Iterate 50 Random Initializationsfor i = 1:50  % New Initialization!  [a,b,c,d,X] = initClusters();  % New centroids!  centroidRows = randperm(size(X)(1));  initCentroids = X(centroidRows(1:4), :);    % Save all mse  [assignments, centroids, error] = kMeans(X,4,initCentroids);  % Add mse of final clusters  msePerInitialization(i) = error(length(error));  numberOfIterations(i) = length(error);endfor# Plot mse developmentfigure(4)plot(msePerInitialization)title("Mean Squared Errors (Task 1b)")saveas (4, "mse_1b.png");# Plot number of iterationsfigure(5)plot(numberOfIterations)title("Num of Iterations (Task 1b)")saveas (5, "iter_1b.png");%print meansmean(numberOfIterations)mean(msePerInitialization)